#! /usr/bin/env node
var t=require("commander"),e=require("terminal-link"),i=require("lolcatjs"),s=require("configstore"),o=require("@octokit/rest"),a=require("fs"),n=require("chalk"),r=require("inquirer"),l=require("https"),c=require("figlet"),d=require("opn"),p=require("clipboardy");function u(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var g=u(t),f=u(e),m=u(i),h=u(s),w=u(a),y=u(n),b=u(r),v=u(l),S=u(c),k=u(d),G=u(p),L="gisti",$="0.0.12";const q=new h.default(L,{},{globalConfigPath:!0});let T;var C=t=>{q.set("github.token",t),console.log("Token successfully saved")},D=()=>q.get("github.token");const I=t=>{!!D()?t():(x(),console.log(y.default.red.bold("Set your personal github access token")),console.log(`run ${y.default.rgb(0,160,200).bold("gisti auth")} or ${y.default.rgb(0,160,200).bold("gisti auth --token <token>")}`))},x=()=>{m.default.fromString(S.default.textSync("GISTI",{font:"ANSI Shadow",horizontalLayout:"full"}))},O=(t,e)=>t?[e]:[],P=(t,e=process.cwd())=>{const i=t.gistId?`${t.gistId}_${t.filename}`:t.filename,s=w.default.createWriteStream(`${e}/${i}`);return new Promise((e=>v.default.get(t.raw_url,(o=>{o.pipe(s),console.log(y.default.green(i+" downloaded")),e(t)}))))},j=({id:t,files:e})=>{const i=`${process.cwd()}/${t}`;(t=>{w.default.existsSync(t)||w.default.mkdirSync(t)})(i);const s=Object.values(e),o=[];for(const t of s)o.push(P(t,i));return Promise.all(o)},z=async({html_url:t})=>{k.default(t)},_=(t,e)=>{Y(t,e).forEach((t=>console.log(t)))},Y=(t,e=!1)=>t.reduce(((t,i)=>{const s=Object.values(i.files);return[...t,...[y.default.rgb(184,190,202).bold(`${i.id} - ${i.description} - Files:${s.length}${i.public?"":y.default.rgb(236,98,113)(" [Private]")}`),...O(e,...s.map((t=>"- "+t.filename)))]]}),[]),A=async t=>t.reduce(((t,e)=>[...t,...[{name:`${y.default.rgb(184,190,202).bold(e.id)} - ${e.description}`,value:e}]]),[]),E=(()=>{const t=q.get("github.token");return T=new o.Octokit({auth:t}),T})(),F=(t,e)=>{switch(2*e+t){case 1:return U();case 2:return R();default:return N()}},N=async()=>{const{data:t}=await E.gists.list();return t},R=async()=>{const{data:t}=await E.gists.list();return t.filter((({public:t})=>!1===t))},U=async()=>{const{data:t}=await E.gists.listStarred();return t},W=t=>E.gists.get({gist_id:t}),B=async t=>{const e=await N();return t?e.filter((({id:e,description:i})=>{return s=`${e} ${i}`,t.split(" ").every((t=>s.match(new RegExp(t,"i"))));var s})):e},H=t=>E.gists.delete({gist_id:t}),J=()=>b.default.prompt([{name:"continueDelete",type:"confirm",message:"Are you sure you want to delete this gist?",default:!1}]),K=async()=>{const{searchString:t}=await b.default.prompt([{name:"searchString",type:"input",message:"Search:",validate:t=>!!t.length||"Please enter a search"}]);return await B(t)},M=async t=>{const e=await(async t=>t.reduce(((t,e)=>{const i=Object.values(e.files);return[...t,new b.default.Separator(y.default.rgb(184,190,202).bold(`${e.description} - files: ${i.length}`)),...O(i.length>1,{name:y.default.rgb(0,160,200).bold(e.id),value:e}),...i.map((t=>({name:""+t.filename,value:{...t,gistId:e.id}})))]}),[]))(t),{gistsToDownload:i}=await(t=>{const e=[{type:"checkbox",message:"Choose gists or files to download",name:"gistsToDownload",pageSize:t.length,choices:t,validate:t=>!(t.length<1)||"You must choose at least one gist or file."}];return b.default.prompt(e)})(e),s=[];for(const t of i)t.id&&s.push(j(t)),t.filename&&s.push(P(t));await Promise.all(s),console.log(y.default.green.bold("Download finished"))},Q=async t=>{const e=await A(t),{gistToOpen:i}=await(t=>{const e=[{type:"list",message:"Select gist to open",name:"gistToOpen",pageSize:t.length,choices:t,validate:t=>!(t.length<1)||"You must choose at least one gist or file."}];return b.default.prompt(e)})(e);z(i)},V=async t=>{const e=await A(t),{gistToCopy:i}=await(async t=>{const e=[{type:"list",message:"Select gist to copy",name:"gistToCopy",pageSize:t.length,choices:t,validate:t=>!(t.length<1)||"You must choose at least one gist or file."}];return b.default.prompt(e)})(e);(({id:t})=>{G.default.write(t)})(i)},X=async t=>{const e=await A(t),{gistToDelete:{id:i}}=await(async t=>{const e=[{type:"list",message:"Select gist to delete",name:"gistToDelete",pageSize:t.length,choices:t,validate:t=>1===t.length||"You must choose one gist."}];return b.default.prompt(e)})(e),{continueDelete:s}=await J();s&&H(i)};m.default.options.seed=744;g.default.name("gisti").description("GISTI - The interactive CLI for gist").version($),g.default.command("auth [token]").description("Sets/Updates the personal access token").option("-t, --token <token>","Set token").action((async(t,{token:e})=>{if(t=t||e)C(t);else{const t=f.default("https://github.com/settings/tokens","https://github.com/settings/tokens/new?description=GISTI&scopes=gist",{fallback:t=>t});console.log("Create a new personal access token at: "+y.default.rgb(0,160,200).bold(t));const{token:e}=await b.default.prompt([{name:"token",type:"input",message:"Access Token:",validate:t=>!!t.length||"Please enter a token"}]);C(e)}})),g.default.command("list").description("List your gists").option("-x, --private","List private Gists",!1).option("-s, --starred","List starred Gists",!1).option("-p, --public","List public Gists",!1).option("-f, --files","List files of Gist",!1).action((({starred:t,private:e,files:i})=>I((async()=>{const s=await F(t,e);_(s,i)})))),g.default.command("copy").description("Copies the id of a gist to the clipboard").option("-x, --private","List private Gists",!1).option("-s, --starred","List starred Gists",!1).option("-p, --public","List public Gists",!1).action((({starred:t,private:e})=>I((async()=>{const i=await F(t,e);V(i)})))),g.default.command("open [id]").description("Opens a gist in your browser").option("--id <id>","Gist id for non-interactive update").option("-x, --private","List private Gists",!1).option("-s, --starred","List starred Gists",!1).option("-p, --public","List public Gists",!1).action(((t,{id:e,starred:i,private:s})=>I((async()=>{if(t=t||e)(async t=>{const{data:e}=await W(t);z(e),Promise.resolve()})(t);else{const t=await F(i,s);Q(t)}})))),g.default.command("create <files...>").description("Creates a new gist").option("-x, --private","Create private Gist",!0).option("-p, --public","Create public Gists",!1).option("-d, --description <description>","Set the gist description").action(((t,{private:e,description:i})=>I((()=>{const s=t.reduce(((t,e)=>{const i=e.split("/");return{...t,[i[i.length-1]]:{content:w.default.readFileSync(e,"utf8")}}}),{});(t=>{E.gists.create(t)})({description:i,public:!e,files:s})})))),g.default.command("download [id]").description("Downloads a gist or gist file").option("--id <id>","Gist id").option("-x, --private","List private Gists",!1).option("-s, --starred","List starred Gists",!1).option("-p, --public","List public Gists",!1).action(((t,{private:e,id:i,starred:s})=>I((async()=>{if(t=t||i){const{data:e}=await W(t);j(e)}else{const t=await F(s,e);M(t)}})))),g.default.command("search [query]").description("Searches for gists").option("-l, --list","List search result").option("-c, --copy","Copy the id of one resulted gist").option("-o, --open","Open one resulted gist in browser").option("-d, --download","Download resulted gists").action(((t,{list:e,copy:i,open:s,download:o})=>I((async()=>{const a=(({list:t,copy:e,open:i,download:s})=>s?M:t?_:e?V:i?Q:_)({list:e,copy:i,open:s,download:o});if(t){a(await B(t))}else{a(await K())}})))),g.default.command("delete [id]").description("Deletes a gist from github").option("-x, --private","List private Gists",!1).option("-p, --public","List public Gists",!1).action(((t,{private:e,id:i,starred:s})=>I((async()=>{if(t=t||i){const{continueDelete:e}=await J();e&&H(t)}else{const t=await F(s,e);X(t)}}))));g.default.parse(process.argv);
